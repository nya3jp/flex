// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package flex;

option go_package = "github.com/nya3jp/flex/flexpb";

import "google/protobuf/duration.proto";

message TaskStatus {
  Task task = 1;
  TaskState state = 2;
  string worker = 3;
}

enum TaskState {
  PENDING = 0;
  RUNNING = 1;
  FINISHED = 2;
}

message ListTasksRequest {
  int64 count = 1;
  int64 offset = 2;
}

message ListTasksResponse {
  repeated Task tasks = 1;
}

message ListWorkersRequest {}

message ListWorkersResponse {
  repeated WorkerStatus workers = 1;
}

message WorkerStatus {
  WorkerInfo info = 1;
  WorkerState state = 2;
  Task current_task = 3;
}

enum WorkerState {
  DOWN = 0;
  UP = 1;
}

service Worker {
  rpc GetWorkerInfo(GetWorkerInfoRequest) returns (GetWorkerInfoResponse) {}
  rpc RunTask(RunTaskRequest) returns (stream RunTaskResponse) {}
}

message GetWorkerInfoRequest {}

message GetWorkerInfoResponse {
  WorkerInfo info = 1;
}

message WorkerInfo {
  string name = 1;
}

message RunTaskRequest {
  Task task = 1;
}

message Task {
  TaskId id = 1;
  TaskSpec spec = 2;
}

message TaskSpec {
  TaskCommand command = 1;
  repeated TaskPackage packages = 2;
  TaskLimits limits = 3;
  TaskConstraints constraints = 4;
}

message TaskId {
  int64 id = 1;
}

message TaskConstraints {
  int32 priority = 1;
}

message TaskCommand {
  string shell = 1;
}

message TaskPackage {
  string url = 1;
  string install_path = 2;
}

message TaskLimits {
  google.protobuf.Duration time = 1;
}

message RunTaskResponse {
  oneof type {
    TaskOutput output = 1;
    TaskResult result = 2;
  }
}

message TaskOutput {
  bytes stdout = 1;
  bytes stderr = 2;
}

message TaskResult {
  oneof status {
    int32 exit_code = 1;
    string error = 2;
  }
  google.protobuf.Duration time = 3;
}
