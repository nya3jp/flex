// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package flex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlexletClient is the client API for Flexlet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlexletClient interface {
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error)
}

type flexletClient struct {
	cc grpc.ClientConnInterface
}

func NewFlexletClient(cc grpc.ClientConnInterface) FlexletClient {
	return &flexletClient{cc}
}

func (c *flexletClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	out := new(RunTaskResponse)
	err := c.cc.Invoke(ctx, "/flex.Flexlet/RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlexletServer is the server API for Flexlet service.
// All implementations must embed UnimplementedFlexletServer
// for forward compatibility
type FlexletServer interface {
	RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error)
	mustEmbedUnimplementedFlexletServer()
}

// UnimplementedFlexletServer must be embedded to have forward compatible implementations.
type UnimplementedFlexletServer struct {
}

func (*UnimplementedFlexletServer) RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (*UnimplementedFlexletServer) mustEmbedUnimplementedFlexletServer() {}

func RegisterFlexletServer(s *grpc.Server, srv FlexletServer) {
	s.RegisterService(&_Flexlet_serviceDesc, srv)
}

func _Flexlet_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexletServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.Flexlet/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexletServer).RunTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flexlet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "flex.Flexlet",
	HandlerType: (*FlexletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTask",
			Handler:    _Flexlet_RunTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flex.proto",
}
