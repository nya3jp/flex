// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package flexletpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlexletServiceClient is the client API for FlexletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlexletServiceClient interface {
	WaitTask(ctx context.Context, in *WaitTaskRequest, opts ...grpc.CallOption) (*WaitTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	ReturnTask(ctx context.Context, in *ReturnTaskRequest, opts ...grpc.CallOption) (*ReturnTaskResponse, error)
	FinishTask(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*FinishTaskResponse, error)
	UpdateFlexletSpec(ctx context.Context, in *UpdateFlexletSpecRequest, opts ...grpc.CallOption) (*UpdateFlexletSpecResponse, error)
}

type flexletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlexletServiceClient(cc grpc.ClientConnInterface) FlexletServiceClient {
	return &flexletServiceClient{cc}
}

func (c *flexletServiceClient) WaitTask(ctx context.Context, in *WaitTaskRequest, opts ...grpc.CallOption) (*WaitTaskResponse, error) {
	out := new(WaitTaskResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexletService/WaitTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexletServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexletService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexletServiceClient) ReturnTask(ctx context.Context, in *ReturnTaskRequest, opts ...grpc.CallOption) (*ReturnTaskResponse, error) {
	out := new(ReturnTaskResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexletService/ReturnTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexletServiceClient) FinishTask(ctx context.Context, in *FinishTaskRequest, opts ...grpc.CallOption) (*FinishTaskResponse, error) {
	out := new(FinishTaskResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexletService/FinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexletServiceClient) UpdateFlexletSpec(ctx context.Context, in *UpdateFlexletSpecRequest, opts ...grpc.CallOption) (*UpdateFlexletSpecResponse, error) {
	out := new(UpdateFlexletSpecResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexletService/UpdateFlexletSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlexletServiceServer is the server API for FlexletService service.
// All implementations must embed UnimplementedFlexletServiceServer
// for forward compatibility
type FlexletServiceServer interface {
	WaitTask(context.Context, *WaitTaskRequest) (*WaitTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	ReturnTask(context.Context, *ReturnTaskRequest) (*ReturnTaskResponse, error)
	FinishTask(context.Context, *FinishTaskRequest) (*FinishTaskResponse, error)
	UpdateFlexletSpec(context.Context, *UpdateFlexletSpecRequest) (*UpdateFlexletSpecResponse, error)
	mustEmbedUnimplementedFlexletServiceServer()
}

// UnimplementedFlexletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlexletServiceServer struct {
}

func (UnimplementedFlexletServiceServer) WaitTask(context.Context, *WaitTaskRequest) (*WaitTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitTask not implemented")
}
func (UnimplementedFlexletServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedFlexletServiceServer) ReturnTask(context.Context, *ReturnTaskRequest) (*ReturnTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnTask not implemented")
}
func (UnimplementedFlexletServiceServer) FinishTask(context.Context, *FinishTaskRequest) (*FinishTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedFlexletServiceServer) UpdateFlexletSpec(context.Context, *UpdateFlexletSpecRequest) (*UpdateFlexletSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlexletSpec not implemented")
}
func (UnimplementedFlexletServiceServer) mustEmbedUnimplementedFlexletServiceServer() {}

// UnsafeFlexletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlexletServiceServer will
// result in compilation errors.
type UnsafeFlexletServiceServer interface {
	mustEmbedUnimplementedFlexletServiceServer()
}

func RegisterFlexletServiceServer(s grpc.ServiceRegistrar, srv FlexletServiceServer) {
	s.RegisterService(&FlexletService_ServiceDesc, srv)
}

func _FlexletService_WaitTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexletServiceServer).WaitTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexletService/WaitTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexletServiceServer).WaitTask(ctx, req.(*WaitTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexletService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexletServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexletService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexletServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexletService_ReturnTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexletServiceServer).ReturnTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexletService/ReturnTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexletServiceServer).ReturnTask(ctx, req.(*ReturnTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexletService_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexletServiceServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexletService/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexletServiceServer).FinishTask(ctx, req.(*FinishTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexletService_UpdateFlexletSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlexletSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexletServiceServer).UpdateFlexletSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexletService/UpdateFlexletSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexletServiceServer).UpdateFlexletSpec(ctx, req.(*UpdateFlexletSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlexletService_ServiceDesc is the grpc.ServiceDesc for FlexletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlexletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flex.FlexletService",
	HandlerType: (*FlexletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WaitTask",
			Handler:    _FlexletService_WaitTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _FlexletService_UpdateTask_Handler,
		},
		{
			MethodName: "ReturnTask",
			Handler:    _FlexletService_ReturnTask_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _FlexletService_FinishTask_Handler,
		},
		{
			MethodName: "UpdateFlexletSpec",
			Handler:    _FlexletService_UpdateFlexletSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/flexletpb/flexlet_service.proto",
}
