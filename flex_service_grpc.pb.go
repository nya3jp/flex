// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package flex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlexServiceClient is the client API for FlexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlexServiceClient interface {
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	GetJobOutput(ctx context.Context, in *GetJobOutputRequest, opts ...grpc.CallOption) (*GetJobOutputResponse, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	InsertPackage(ctx context.Context, opts ...grpc.CallOption) (FlexService_InsertPackageClient, error)
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	ListFlexlets(ctx context.Context, in *ListFlexletsRequest, opts ...grpc.CallOption) (*ListFlexletsResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type flexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlexServiceClient(cc grpc.ClientConnInterface) FlexServiceClient {
	return &flexServiceClient{cc}
}

func (c *flexServiceClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (*SubmitJobResponse, error) {
	out := new(SubmitJobResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/SubmitJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobResponse, error) {
	out := new(CancelJobResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) GetJobOutput(ctx context.Context, in *GetJobOutputRequest, opts ...grpc.CallOption) (*GetJobOutputResponse, error) {
	out := new(GetJobOutputResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/GetJobOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) InsertPackage(ctx context.Context, opts ...grpc.CallOption) (FlexService_InsertPackageClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlexService_ServiceDesc.Streams[0], "/flex.FlexService/InsertPackage", opts...)
	if err != nil {
		return nil, err
	}
	x := &flexServiceInsertPackageClient{stream}
	return x, nil
}

type FlexService_InsertPackageClient interface {
	Send(*InsertPackageRequest) error
	CloseAndRecv() (*InsertPackageResponse, error)
	grpc.ClientStream
}

type flexServiceInsertPackageClient struct {
	grpc.ClientStream
}

func (x *flexServiceInsertPackageClient) Send(m *InsertPackageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flexServiceInsertPackageClient) CloseAndRecv() (*InsertPackageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(InsertPackageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flexServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) ListFlexlets(ctx context.Context, in *ListFlexletsRequest, opts ...grpc.CallOption) (*ListFlexletsResponse, error) {
	out := new(ListFlexletsResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/ListFlexlets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/flex.FlexService/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlexServiceServer is the server API for FlexService service.
// All implementations must embed UnimplementedFlexServiceServer
// for forward compatibility
type FlexServiceServer interface {
	SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error)
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	GetJobOutput(context.Context, *GetJobOutputRequest) (*GetJobOutputResponse, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	InsertPackage(FlexService_InsertPackageServer) error
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	ListFlexlets(context.Context, *ListFlexletsRequest) (*ListFlexletsResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	mustEmbedUnimplementedFlexServiceServer()
}

// UnimplementedFlexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlexServiceServer struct {
}

func (UnimplementedFlexServiceServer) SubmitJob(context.Context, *SubmitJobRequest) (*SubmitJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedFlexServiceServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedFlexServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedFlexServiceServer) GetJobOutput(context.Context, *GetJobOutputRequest) (*GetJobOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobOutput not implemented")
}
func (UnimplementedFlexServiceServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedFlexServiceServer) InsertPackage(FlexService_InsertPackageServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertPackage not implemented")
}
func (UnimplementedFlexServiceServer) GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedFlexServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedFlexServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedFlexServiceServer) ListFlexlets(context.Context, *ListFlexletsRequest) (*ListFlexletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlexlets not implemented")
}
func (UnimplementedFlexServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedFlexServiceServer) mustEmbedUnimplementedFlexServiceServer() {}

// UnsafeFlexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlexServiceServer will
// result in compilation errors.
type UnsafeFlexServiceServer interface {
	mustEmbedUnimplementedFlexServiceServer()
}

func RegisterFlexServiceServer(s grpc.ServiceRegistrar, srv FlexServiceServer) {
	s.RegisterService(&FlexService_ServiceDesc, srv)
}

func _FlexService_SubmitJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).SubmitJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/SubmitJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).SubmitJob(ctx, req.(*SubmitJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_GetJobOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).GetJobOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/GetJobOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).GetJobOutput(ctx, req.(*GetJobOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_InsertPackage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlexServiceServer).InsertPackage(&flexServiceInsertPackageServer{stream})
}

type FlexService_InsertPackageServer interface {
	SendAndClose(*InsertPackageResponse) error
	Recv() (*InsertPackageRequest, error)
	grpc.ServerStream
}

type flexServiceInsertPackageServer struct {
	grpc.ServerStream
}

func (x *flexServiceInsertPackageServer) SendAndClose(m *InsertPackageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flexServiceInsertPackageServer) Recv() (*InsertPackageRequest, error) {
	m := new(InsertPackageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FlexService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_ListFlexlets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlexletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).ListFlexlets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/ListFlexlets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).ListFlexlets(ctx, req.(*ListFlexletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flex.FlexService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlexService_ServiceDesc is the grpc.ServiceDesc for FlexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flex.FlexService",
	HandlerType: (*FlexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitJob",
			Handler:    _FlexService_SubmitJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _FlexService_CancelJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _FlexService_GetJob_Handler,
		},
		{
			MethodName: "GetJobOutput",
			Handler:    _FlexService_GetJobOutput_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _FlexService_ListJobs_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _FlexService_GetPackage_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _FlexService_UpdateTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _FlexService_ListTags_Handler,
		},
		{
			MethodName: "ListFlexlets",
			Handler:    _FlexService_ListFlexlets_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _FlexService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertPackage",
			Handler:       _FlexService_InsertPackage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "flex_service.proto",
}
